// Code generated by mockery v1.0.0
package mocks

import cashdeposit "github.com/muhammadaser/cash_deposit/cashdeposit"
import mock "github.com/stretchr/testify/mock"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// GetListDeposits provides a mock function with given fields:
func (_m *Store) GetListDeposits() ([]cashdeposit.CashDeposit, error) {
	ret := _m.Called()

	var r0 []cashdeposit.CashDeposit
	if rf, ok := ret.Get(0).(func() []cashdeposit.CashDeposit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cashdeposit.CashDeposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListDepositsByAccount provides a mock function with given fields: accountID
func (_m *Store) GetListDepositsByAccount(accountID string) ([]cashdeposit.CashDeposit, error) {
	ret := _m.Called(accountID)

	var r0 []cashdeposit.CashDeposit
	if rf, ok := ret.Get(0).(func(string) []cashdeposit.CashDeposit); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cashdeposit.CashDeposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalBalance provides a mock function with given fields: accountID
func (_m *Store) GetTotalBalance(accountID string) (cashdeposit.TotalBalance, error) {
	ret := _m.Called(accountID)

	var r0 cashdeposit.TotalBalance
	if rf, ok := ret.Get(0).(func(string) cashdeposit.TotalBalance); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Get(0).(cashdeposit.TotalBalance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostDeposit provides a mock function with given fields: deposit
func (_m *Store) PostDeposit(deposit cashdeposit.CashDeposit) error {
	ret := _m.Called(deposit)

	var r0 error
	if rf, ok := ret.Get(0).(func(cashdeposit.CashDeposit) error); ok {
		r0 = rf(deposit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
